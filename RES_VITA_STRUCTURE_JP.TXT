FOR JP ONLY (PSVITA)
- PCSG00719 (GOD EATER RESURRECTION)
- PCSG00532 (GOD EATER 2 RAGE BURST)



### HEADER
- MAGIC HEADER = ASCII or 0x73657250
- GroupOffset = offset that brings to DataSet.
- MAGIC 1, 2 = int32 values 4 bytes each. not needed for the time being or not yet documented well enough
- Configs = int32 offset. usually where the chunks of data is stored and etc.
- padding. 12 bytes. just zeroes.

#### End of Fixed Header Structure: 4+4+4+4+4+12 = 32 bytes


### DataSet
- dataset offset = uint32. Pointer to the first fileset data.
- dataset count = counter for each dataset. each count represents 32 bytes for Fileset Data separately.

#### End of Fixed DataSet Structure: (4+4)*8=64 bytes.
Notes: (4+4) combines dataset offset and count, thus performing DataSet 1 (like grouping).
			*8 defines the total of groups. thus 64 bytes in total (seperated by 8 groups).





### Fileset Data
- Offset = A int32 offset pointer where a chunk is stored, though the given offset isn't yet corrected
	**offset enumerators
	- 0x4 = RDP Package File (required file: package.rdp)
	- 0x0 = NoSets. default offset is always 0x00000000
	- 0x3 = DataSets. default offset is always 0x30000000
	- 0xC or 0xD = Current File
	- 0x5 = RDP Data File (required file: data.rdp)
	- 0x6 = RDP Patch File (required file: patch.rdp)
--- when converting the offset into a proper/real offset (exclude 0x0 and 0x3). nibble/remove the offset's first value. if it matches with:
	- Current File (0xC or 0xD): then 30 77 03 C0 or C0037730 becomes 0037730, then thats the real offset
	- RDP Package File: then B3 3D 14 40 or 40143DB3 becomes 0143DB3, then thats the RDP divided offset but it needs to get multiplied to get the absolute offset. multiplication is by *0x800
	- Example of multiplication: 00143DB3 * 0x800 = A1ED9800

- Csize = int32 value. usually refers to the size of the chunk that Offset is using.
- OffsetName = 	an int32 offset pointer. where you can locate the set File Name for that chunk.
- ChunkName: int32. controller for the TABLE NAME set for that chunk. basically a file name and format.
- Padding: 12 bytes of nothing.
- DSIZE: int32. a decompression size. Defines the true file size when decompresed in game. if not compressed, it uses the same value as CSIZE

Notes: 	if Fileset Data have full paddings/zeroes except Dsize. that Fileset is a `dummy` as we can call it.
		So it cannot be processed and best to be skipped. But if the rest are not present except OffsetName or ChunkName. that's a empty file


#### End of Fixed Fileset Structure: 4+4+4+4+12+4=32 bytes




### Name Structure (Related to OffsetName)

-- Name: int32. pointer of the name
-- Type: int32. pointer of the type of file
-- Path: on later pointers after the first two. it'll be path/directory values or just zero `\0`
Notes on paths in the VITA version: they have special properties and handle it with care.


#### End FIXED TABLE NAME Structure: 4+4+4+4+4 = 20 bytes max
- usually not 20 bytes overall in max but to determine the max size of that table name uses. do multiplication on the chunkname.
- multiply by 4, you get the pointers you need to form the texts that you need.
- keep in mind that you have to make some guesses on this one either extract the file with a path or not.
