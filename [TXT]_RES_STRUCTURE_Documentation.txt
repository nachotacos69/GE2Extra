#RES ARCHIVE Documentation (GOD EATER 2 PSP/Vita)
~ WRITTEN IN JANUARY 10, 2025, UPDATED IN FEB 27, 2025
~ By: Yamato Nagasaki 
~ With some help with: gil-unx, SkyBladeCloud, HaoJun/Randerion
~ some small support: DarkGD
~ Tool used for my entire operation
	-HxD
	-Notepad++
	-Python
	-Visual Studio 2017
	-Calculator (hell yeah)
	-TR2 Editor (i use both from HaoJun/Randerion and nyirsh) >>>> https://github.com/HaoJun0823/GECV or https://github.com/HaoJun0823/GECV-OLD || https://github.com/nyirsh/GEBUtils
	-GEBCS (from gil-unx, for reference on the basic RES structure) >>>> https://github.com/gil-unx/GEBCS


|||||||||||||||||||||Contents of the Text|||||||||||||||||||||
1. START [Line: 31]
2. Entry Datas [Line: 51]
3. Table Of Contents/TOC [Line: 65]
4. Name Structure [Line: 122]
5. Compression System [Line: 193]
6. MODIFICATION Warnings // Conclusions [Line: 216]

=============================================================================================================================================
? Notes: i wrote this for PSP/Vita Version of God Eater 2. just to note myself on what to do (despite having a PDF and PNG documentation lol)
? if some don't match, you can try to mess around and document it too.
!! Keep in Mind: PC/PS4, or those with MULTI language RES File is not supported here. i barely interacted with them :(



====[START]====
0x00 = MAGIC/HEADER: Starting point of each RES, ASCII: PRES || HEX: 0x73657250
0x04 = Group Offset: an offset that brings you to a entry related data separated 8 bytes each
---> Group Offset is usually 0x20 given offset by default but you can always check around
0x08 = Group Count: Total of available datas that Group Offset area multiply by 8 then split the total by 8 to read them separately
---> Usually Group Count uses just 8 so, you can just read Group Offset then read that area by 8*8 bytes
0x09 = Group Version: group version. that's it
0x0A = Checksum: For the time being, i currently have no idea.
0x0C = Version: version of the RES archive.
0x10 = Datas: Mostly where the stuff are stored (compressed datas, audios and more)
0x14 = Sideloading RES Offset: Seems like this one is for the DLC RES files of the game.
0x18 = Sideloading RES Size: Same with 0x14 but only mentions the size of that RES file
---> if any files that are modified and included within the DLC, the game will load the original/unmodified RES then loads the DLC version itself, or the opposite
---> Im not entirely sure but you can double check :)
0x1C = ??





====[Entry Datas]====
~ related to Group Offset's given offset, which is 0x20
Ranging in: 0x20 <-> 0x5F - mostly of all where the the Entry data is within that chunk/area. Separated in 8 bytes.
Entry Offset: 4 bytes offset. leads you to where this data starts
Entry Count: 4 bytes value. totals on how many that Entry uses. start from Entry Offset of course
---> Entry Count is important here, since you will need to count the Entries multiply (*) by 32 bytes.
---> So for example, if Entry Offset 0x13A0 and it has a count of 10 (or A in hex). multiply the value of 10 by 32. (10*32)
---> then you should get 320 bytes (140 in hex), and Separate that 320 bytes by reading it in 32 bytes each.
---> Overall, each count value represents 32 bytes by default.





===[Table of Contents/TOC]===
~ Related to Entry Datas
? You can take the Entry Offset and jump to that chunk/area. once there you can check that 32 bytes of data.
? Each 32 bytes from Entry Datas has the same structure.

Sample HEX structure of TOC:
!! just imagine that 0x13A0 Entry starts here
===========================================================
0x000013A0: DD 55 03 40 E0 B9 03 00 90 1D 00 00 03 00 00 00 
0x000013B0: 00 00 00 00 00 00 00 00 00 00 00 00 E0 B9 03 00
===========================================================

\\\\ Offset/Start Offset: 4 bytes offset. A pointer of where a content is stored (example: DD 55 03 40 or 400355DD)
!! Each offset has it's fair share of enumerators or first value on each offsets: 0x0, 0x3, 0x4, 0x5, 0x6, 0xC, 0xD
!! When reading these enumerators. they are not included when you search for them. to pinpoint the actual offset, you need to eliminate that first value.
!! Then you get the offset you need for the entire operation. Example: 0xF0000000 (remove 0xF). then result will be 0x0FFFFFFF. (doesnt apply on NoSet and Unknown)

~ BIN/MODULE
---> 0x0 refers to a outside file (offset will give 0x00000000 by default). since it already exists within folders but doesn't get mention in the archive.
----> But probably when the game runs, it searches for that specific file. (usually happens commonly in the PSVITA side).

~ NoSet
---> 0x3 refers to a Exclusion of file outside RDP (offset will give 0x30000000 by default). This one is unique since it refers to the files outside of the RDP file. 
----> You can find their paths based on it's Name Offset. but probably still important. (usually happens commonly in the PSVITA side).

~ RDP Files
---> 0x4 refers to the PACKAGE file || 0x5 refers to the DATA file || 0x6 refers to the PATCH file (named patch.edat in DLC but you can rename it in rdp format).
----> (offset will give 0x4[the important offset]. example: 0x4[0109BFF]). Each of these package related offsets are really unique and should be calculated correctly
----> Each of these offsets are not really true. These offsets have been divided (/), so you need to multiply them (*) by 0x800 in offset to properly give you the correct offset.
----> Sample: 0x400355DD or any given RDP offsets, (remove enumerator) 0x00355DD * 0x800 = 0x1AAEE800

~ Current
---> 0xC and 0xD refers that the file is currently inside that RES file you're reading. (offset will give 0xC[the important offset]. example: 0xC[0010F10])
----> you can apply the reading procedure in the RDP files but without any multiplications (*)
----> Example: 0xC000F680 (remove enumerator) = 0x0000F680

\\\\ Size/Compressed Size: int/uint32 value. refers the size on how much the offset uses that area. (example: E0 B9 03 00 or 3B9E0 in DECIMAL: 244192)
!! If the Start Offset's first 4 bytes should start at `blz2` MAGIC/HEADER. then that area is compressed.
---> You can properly calculate the End Offset of the Given Offset. Basically summing up the Offset+Size
----> Sample: 0x1AAEE800 + Size Given which is -> 3B9E0 = 0x1AB2A1E0. so the Start Offset is at: 0x1AAEE800 and its End Offset is: 0x1AB2A1E0. pretty neat.

\\\\ Name Offset: 4 bytes offset. A pointer of where a name is stored for that Offset to use (example: 90 1D 00 00 or 1D90)
---> Each given offsets have a name set to them.
\\\\ Name Value: int/uint32 value. A value refers to the Name Offset (example: 03 00 00 00 or 03)
---> Related to how that Name is structured. whether be name, format/type, and its directories/subdirectories.
----> commonly used values are 1, 3, 4, 5.

\\\\ Padding/Zeroes
!! Just a 12 bytes of nothing. 

\\\\ Size/Decompressed Size: int/uint32 value. refers the size on how much the offset uses that area. (example: E0 B9 03 00 or 3B9E0 in DECIMAL: 244192)
---> If Compressed and Decompressed Size matches. means that the area is not compressed. But if it doesnt match, then that is compressed.





====[Name Structure]====

Sample HEX of Name Structure:
============================================================
0x00002FA0: B4 2F 00 00 C8 2F 00 00 CC 2F 00 00 CD 2F 00 00 
0x00002FB0: D2 2F 00 00 53 73 61 5F 43 68 61 74 5F 55 70 64 
0x00002FC0: 61 74 65 49 63 6F 6E 00 73 73 71 00 00 4C 6F 6F 
0x00002FD0: 70 00 5F 43 4F 4D 50 41 54 00 00 00 00 00 00 00
============================================================

!! The total Bytes of the Name Structure is 24 bytes. 4 bytes each for their purposes. (Name Offset, Type, Path, SubDir, NoSetPath/Another SubDir)
!! refers to the Name Offset and Name Value
!! the Name Structure uses 4 bytes each, so multiply (*) the given Name Value by 4 then split the given total value by 4 to read each structure.
!! usually the Name Values are only 1, 3, 4, 5 so each of those values represents
!! Combining Name and Type to form the actual file. (sample: fish.png)


//// Name Offset: 4 bytes offset. refers where the name is located. (B4 2F 00 00 or 2FB4)
!! Don't be confused with the TOC's given Name Offset here by the way.
---> Represents the Value 1.. giving you the name.

//// Name Type: 4 bytes offset. refers where the name's format or type is located (C8 2F 00 00 or 2FC8)
---> Represents the Value 2.. but not really existing as it mostly gets override by value 3. (so mostly refer to this as 3)

//// Path: 4 bytes offset. refers to the directory of that file. (CC 2F 00 00 or 2FCC)
---> Represents the Value 3.. Usually if the file has a result with a bunch of zeroes usually 2 or 4 of them, then that file's path doesn't have any directories/subdirectories.
----> like this for example (./fish.png), basically the file is direct with no directories/subdirectories at all.
-----> If the Path has any sequence of text, usually it look like it has a text in it (example: `picture`). 
-----> But usually if the Path has a another directory or subdirectory it should mention the first byte of zero then a sequence of texts (example: .Loo, which translates that to ./Loo)
-----> It cuts of the final letter and that's why SubDir mostly handles the rest of the text.

//// SubDir: 4 bytes offset, continuation of the Path (CD 2F 00 00 or 2FCD)
----> Represents the Value 4.. its mostly continues the Path's directory text. and for the name fully (example: .Loop or ./Loop)
----> Other than that, it also represents another thing, Subdirectory. which gives you a text, a slash (/) and the Name and Type of that file.
-----> Examples of SubDir combine with Path: ./Loop/Sequence/Of/Path/Fish.png or .data/GameData/event/GE2/demo1090_1/Event.res
-----> commonly these SubDir gives some symbols on the texts (_ or =) but i can't really say their true purposes.


//// NoSetPath/Another SubDir: Represents another SubDir or just an important directory with a `PATH=` prefix (D2 2F 00 00 or 2FD2)
!! These two have different purposes
!! Represents Value 5..

+++FOR `PATH=` prefix
---> These ones atleast on the PSVITA side, mentions the location of that directory+file. followed by the `PATH=` prefix first then the next is the location as the given value
----> For Example: (PATH=images/of/cats.png)
----> These files usually are excludes outside of the RDP file. so the 0x3 enumerator uses the given `PATH=` value to locate the file and validate it's existence

+++FOR the another SubDir
---> This one's purpose is the same as the SubDir or Path but i prefer to it as the same as SubDir. but it only gives you a sequence of text, not much more to explain

//// Overall Structure
!! To Be honest, it is kinda confusing how they should actually structured if they have given directories/subdirectories. but i can give some of my ideas or concepts
---->IF Name Value is 5. then it combines all the structure
----->Sample: [/EXCLUDE_RDP/data_8/bgm_ttl_001title.nus3bank] or [_COMPAT/Loop/Ssa_Chat_UpdateIcon.ssq]
-----> (EXCLUDE_RDP is SubDir, then the data_8/bgm_ttl_001title.nus3bank is the given NoSetPath which trims the PATH=)

---->IF Name Value is 4, then it forms the only given structure 
----->Sample: [.Loop/ssa_Item_Palette_Window.ssq] or [.data/GameData/event/GE2_middle/demo/soma_common_turn_hintup/scene1/Event.res]
-----> (this combines Path and SubDir. because Path mentions .Loo while SubDir completes the the text of Path. forming that overall)

---->IF Name Value is 3, then it uses the only 3 simple structure
----->Sample: [jajp/system_latin.pgf] or [SE_SYS_ENTER1.vag]
-----> (the `jajp` is the directory for that pgf file, while the SE_SYS_ENTER1.vag is mentioned here, it has no given path because of the sequence of zeroes (usually 2 or 4) so it is direct)

---->IF Name Value is 1, then it can only use the Name Structure
----->Sample: [GameBgm_tbl]
-----> (The archive tends to have these files sometimes with no type or formats)




====[Compression]====
!! BLZ2 for GOD EATER 2 (PSP/PSVITA)
!! BLZ4 for GOD EATER RESURRECTION // GOD EATER 2 RAGE BURST // OFFSHOTS (PS4/PSVITA)
!! Currently i have no ideas on BLZ4

/// BLZ2 Compression
0x00 = MAGIC/HEADER: header of the compressed block (ASCII: blz2 || HEX: 0x327a6c62)
0x04 = Compressed Size: uint16. maximum compression is 0xFFFF.
0x06 and Above = Compressed Blocks, which it the size itself matches with the compressed size value.

--> you can mostly deflate these stuff by using a DeflateStream on C#
---> Keep in mind that the BLZ2 compression above 0xFFFF are needed to be worked in blocks so if that first block you capture and decompressed, 
---> you'd probably get the last chunk or middle chunk of that decompressed file, so you need to process each block, decompress, re-arrange. that's it.
---> if the compressed file is above 0xFFFF, firstly you need to get the first block. of course the compressed block matches with the compressed size value
---> once you got the first block (do not include copying the compressed size value). decompressed it to get your first part of the decompressed area of that file.
---> when finished, read another 2 bytes of compressed size value and get another compressed block. rinse and repeat, and then you should get tons of blocks that you kind need to form them into one file.
---> re-arrange them in 01234567 to a 12345670 manner (when decompressed).
---> re-arrange them in: Header → Last Full Block → Tail → Body (when compressed). [Refer to any existing compression tool for zlib or in my BLOCK_ZIP script]





====[MODIFICATION Warnings // Conclusions]====
!! The game will not accept a file that is outside of it's area
---? Why?, i have no clue. it doesnt really like if a somekind of modification is outside of it's archive. it needs to be properly inserted in that specific archive
---? To properly set the repack, it should be in a reverse manner if i remember correctly.
---? for unpack concept: A.res->B.res->C.res || for repack concept: A.res<-B.res<-C.res