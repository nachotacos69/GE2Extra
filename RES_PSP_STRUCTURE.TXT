#RES ARCHIVE Documentation (GOD EATER 2 PSP Only)
~ WRITTEN IN JANUARY 10 2025.
~ By: Yamato Nagasaki 
~ With some help with: gil-unx, SkyBladeCloud, HaoJun/Randerion
~ some small support: DarkGD
~ Tool used for my entire operation
	-HxD
	-Notepad++
	-Python
	-Visual Studio 2017
	-Calculator (hell yeah)
	-TR2 Editor (i use both from HaoJun/Randerion and nyirsh) >>>> https://github.com/HaoJun0823/GECV or https://github.com/HaoJun0823/GECV-OLD || https://github.com/nyirsh/GEBUtils
	-GEBCS (from gil-unx, for reference on the basic RES structure) >>>> https://github.com/gil-unx/GEBCS


=============================================================================================================================================
? Notes: i wrote this for PSP Version of God Eater 2. just to note myself on what to do
? I decided to remove the PSVita version as i'll be putting it on different documentation
? if some don't match, you can try to mess around and document it too.
!! Keep in Mind: PC/PS4, or those with MULTI language RES File is not supported here. will be documented in another time



====[START]====
MAGIC/HEADER: int32. Starting point of each RES, ASCII: PRES || MAGIC HEX: 0x73657250 (for verification, i suggest using MAGIC HEX))
Group Offset: int32 pointer. an offset that brings you to Group Datas
Group Count: byte. total groups.
Group Version: byte. group version. that's it
Magic 1 & 2: int32, 4 bytes each. not documented well.
CHUNK_DATA: int32 pointer. offset of all of chunks stored in that area. (compressed datas, audios and more). 
Sideloading RES Offset (SiloRES_OFF): int32. Seems like this one is for the DLC RES files of the game.
Sideloading RES Size (SiloRES_VAL): related to SiloRES_OFF but only mentions the size of that RES file
Blank: 4 bytes of padding/zeroes.
Notes:	SiloRES_OFF and and SiloRES_VAL are not documented

### End Fixed START Structure: 4+4+1+1+2+4+4+4+4+4 = 32 bytes




====[GROUP DATAS]====
~ Group Offset -> GROUP DATAS
Fileset Offset: int32 offset. leads you to where to a FILESETS is located
Fileset Count: int32 value. totals on how many FILESETS that Fileset Offset uses.
Notes: 	Each Fileset Count is related for each Fileset Datas. so 3*32 = 160 bytes but read in 32+32+32 to properly check each groups.
		Each GROUP DATAS is separated by 8 bytes (4 bytes for Fileset Offset and 4 bytes of Fileset Count).
		thus if group count is 8, there's multiple of them within that range, some can be empty but still but it shouldnt do anything. (follow END FIX)
		
### End Fixed GROUP DATAS Structure: (4+4)*8 = 64 bytes. 




====[FILESETS]====
~ GROUP DATAS -> FILESETS
-- Offset: int32 pointer. a offset given value. each offset given has multiple indentations or address modes
	**Indentations
		- Empty/Noset: if offset read and given is 4 bytes of padding. then that FILESET entry does not have any given of chunk and rather empty
		- RDP Files: if offset read and given starts with 0x40, 0x50, 0x60. this means that this pointer is not from the current .res file being read and the chunk is somewhere within the RDP files.
					indicators: 0x40 = package.rdp || 0x50 = data.rdp || 0x60 = patch.rdp
		- Local_C: if offset read and given starts with 0xC0. this means that this pointer is currently inside of the .res file and can be read there.
		- Local_D: same as Local_C but 0xD.
		
	** Proper Indentation Reading Examples	
		- Current: if 0xC0001234 is given to you. skip reading 0xC0, and read only 0x0001234. that's the real offset of where the chunk is located.
		- RDP Files. if 0x40034BEA is given to you. skip reading 0x40 (or other mentions RDP file indentations)
		- then only read 0x0034BEA, shift by 11 (<< 11) or multiply by 800 (* 0x800), so 0x0034BEA << 11 or * 0x800 = 0x1A5F5000 is the RDP Offset you need to check 0x4's indicated file (which is package.rdp)
-- CSIZE: int32. a size value, this defines the chunk size that the Offset uses.
-- NameOffset: int32. a offset TABLE NAME set for that chunk.
-- ChunkName: int32. controller for the TABLE NAME set for that chunk. basically a file name and format.
-- Padding: 12 bytes of nothing.
-- DSIZE: int32. a decompression size. Defines the true file size when decompresed in game. if not compressed, it uses the same value as CSIZE
Notes: 	you'll see some filesets are being empty but DSIZE is present so its a dummy fileset. 
		And some instances filesets have no offset, csize, dsize, but NameOffset and ChunkName is present, then that fileset is a empty file

#### End FIXED FILESETS Structure: 4+4+4+4+12+4 = 32 bytes.








====[TABLE NAME]====
-- Name: int32. pointer of the name
-- Type: int32. pointer of the type of file
-- Path: on later pointers after the first two. it'll be path/directory values or just zero `\0`




#### End FIXED TABLE NAME Structure: 4+4+4+4+4 = 20 bytes max
- usually not 20 bytes overall in max but to determine the max size of that table name uses. do multiplication on the chunkname.
- multiply by 4, you get the pointers you need to form the texts that you need.
- keep in mind that you have to make some guesses on this one either extract the file with a path or not.
